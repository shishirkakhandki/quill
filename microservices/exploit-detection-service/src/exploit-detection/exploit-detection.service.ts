import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { ethers } from 'ethers';
import axios from 'axios';

@Injectable()
export class ExploitDetectionService implements OnModuleInit {
  private provider: ethers.providers.JsonRpcProvider;
  private contractAddress: string;
  private workflowServiceUrl: string;
  private contract: ethers.Contract;

  constructor(private configService: ConfigService) {
    this.provider = new ethers.providers.JsonRpcProvider(
      this.configService.get('RPC_URL'),
    );
    this.contractAddress = this.configService.get('CONTRACT_ADDRESS');
    this.workflowServiceUrl = this.configService.get('WORKFLOW_SERVICE_URL');

    // ABI for the pause function
    const abi = ['function pause() external'];
    this.contract = new ethers.Contract(
      this.contractAddress,
      abi,
      this.provider,
    );
  }

  async onModuleInit() {
    this.monitorTransactions();
  }

  private monitorTransactions() {
    console.log('Starting to monitor transactions...');
    this.provider.on('pending', (txHash) => {
      this.analyzePendingTransaction(txHash);
    });
  }

  private async analyzePendingTransaction(txHash: string) {
    try {
      const tx = await this.provider.getTransaction(txHash);
      if (tx && tx.to === this.contractAddress) {
        const decodedData = this.contract.interface.parseTransaction({
          data: tx.data,
        });

        if (decodedData.name === 'pause') {
          console.log('Pause operation detected:', tx);
          // We don't trigger the workflow for pause operations
          return;
        }

        // Here you would implement your specific exploit detection logic
        // This example considers any non-pause transaction to the contract as suspicious
        console.log('Potential exploit detected:', tx);
        const exploitData = {
          address: tx.from,
          amount: ethers.utils.formatEther(tx.value),
        };
        await this.notifyWorkflowService(exploitData);
      }
    } catch (error) {
      console.error('Error analyzing transaction:', error);
    }
  }

  private async notifyWorkflowService(data: {
    address: string;
    amount: string;
  }) {
    try {
      await axios.post(this.workflowServiceUrl, data);
      console.log('Workflow service notified');
    } catch (error) {
      console.error('Failed to notify workflow service:', error);
    }
  }
}
